# install Bioconductor and check version
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install()
BiocManager::version()
# install Bioconductor packages
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
# load installed packages
library(BSgenome.Hsapiens.UCSC.hg19)
library(genefilter)
library(geneplotter)
BiocManager::install(c("genefilter","geneplotter"))
library(BSgenome.Hsapiens.UCSC.hg19)
library(genefilter)
library(geneplotter)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome.Hsapiens.UCSC.hg19)
library(genefilter)
library(geneplotter)
install.packages('brio')
remove.packages('brio')
remove.pacakges("Brio")
install.packages("brio")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
install_version("brio", version = "1.1.1")
require(devtools)
require('devtools')
install.packages('devtools')
library(devtools)
require(devtools)
install_version("brio", version = "1.1.1")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
library(BSgenome)
remove.pacakges(BSGenome)
remove.packages(BSGenome)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
remove.packages("BSgenome")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
library(bioclite)
install.packages('bioclite')
library(biocLite)
install.packages('biocLite')
BiocManager::install("biocLite")
library(biocLite)
source("http://bioconductor.org/biocLite.R")
biocLite("BSgenome.Hsapiens.UCSC.hg19")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
remove.packages("BSgenome")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome")
library(BSgenome.Hsapiens.UCSC.hg19)
BiocManager::install("BSgenome.Hsapiens")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19", dep=True)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19", dep = True)
library(dyld)
library(devtools)
detach("package:devtools", unload = TRUE)
remove.packages("devtools")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19", dep = True)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("GenomeInfoDbData")
remove.packages("htmltools")
install.packages('htmltools')
BiocManager::install("GenomeInfoDbData")
library(GenomeInfoDbData)
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
library(BSGenome.Hsapiens.UCSC.hg19)
library(BSgenome.Hsapiens.UCSC.hg19)
library(genefilter)
library(geneplotter)
help.start()
?mean
help(mean)
help(package="genefilter")
# inspect objects, classes and methods
library(Biobase)    # load one of the core Bioconductor packages
?ExpressionSet
?"ExpressionSet-class"
methods(class = ExpressionSet)
BiocManager::version()
BiocManager::install(c("genefu",
"COPDSexualDimorphism",
"gwascat",
"hgu133a.db",
"genomicsclass/tissuesGeneExpression"))
BiocManager::install(c("genefu",
"COPDSexualDimorphism",
"gwascat",
"hgu133a.db",
"genomicsclass/tissuesGeneExpression"))
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
library(COPDSexualDimorphism.data)
BiocManager::install("COPDSexualDimorphism.data")
BiocManager::install("COPDSexualDimorphism.data")
BiocManager::install("COPDSexualDimorphism.data")
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
library(gwascat)
library(ebicat37)
BiocManager::install("ebicat37")
data(ebicat37)
library(gwascat)
BiocManager::install(c("gwascat", "hgu133a.db", "genomicsclass/tissuesGeneExpression"))
data(ebicat37)
library(gwascat)
data(ebicat37)
â‰¥
library(gwascat)
data(ebicat37)
BiocManager::install(c("genefu",
"COPDSexualDimorphism",
"gwascat",
"hgu133a.db",
"genomicsclass/tissuesGeneExpression"))
data(ebicat37)
library(genefu)
data(ebicat37)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
data(ebicat37)
library(genefu)
library(gwascat)
gwascat
data(ebicat_2020_04_30)
ebicat_2020_04_30
```r
dim(iris)
```
# Section 1: What we measure and why
This is a list
* item 1
* item 2
* item 3
```r
dim(iris)
```
# Section 1: What we measure and why
This is a list
* item 1
* item 2
* item 3
unlink('section1_cache', recursive = TRUE)
# Section 1: What we measure and why
# # Information about the 70 gene signature used in the Mammaprint algorithm
```r
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
```
library(gwascat)
data(ebicat_2020_04_30)
ebicat_2020_04_30
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
sig.gene70
head(sig.gene70)
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
sum(is.na(sig.gene70$NCBI.gene.symbol))
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
sum(is.na(sig.gene70$NCBI.gene.symbol))
sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
print(paste0("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol))
sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
print(paste("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol))
sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
paste("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol)
subset_matching_desc <- sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
paste("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol)
subset_matching_desc <- sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
paste("NCBI gene matching the description cyclin E2: ", subset_matching_desc$NCBI.gene.symbol)
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
paste("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol)
subset_matching_desc <- sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
paste("NCBI gene matching the description cyclin E2: ", subset_matching_desc$NCBI.gene.symbol, "\n")
grep("kinase", sig.gene70.Description)
grep("kinase", sig.gene70$Description)
sum(grep("kinase", sig.gene70$Description))
length(grep("kinase", sig.gene70$Description))
library(genefu)
data(sig.gene70)
dim(sig.gene70)
head(sig.gene70)[,1:6]
count_nan_gene_symbol <- sum(is.na(sig.gene70$NCBI.gene.symbol))
paste("Count of NaN NCBI gene symbols: ", count_nan_gene_symbol)
subset_matching_desc <- sig.gene70[which(sig.gene70$Description == "cyclin E2"), ]
paste("NCBI gene matching the description cyclin E2: ", subset_matching_desc$NCBI.gene.symbol)
number_kinase_coding_genes <- length(grep("kinase", sig.gene70$Description))
paste("Number of kinase coding genes responsible for cell to cell communication: ", number_kinase_coding_genes)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
table(lgrc.expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
table(expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
head(lgrc.expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
head(expr.meta)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
table(expr.meta$GENDER)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
head(expr.meta)
table(expr.meta$GENDER)
library(COPDSexualDimorphism.data)
data(lgrc.expr.meta)
head(expr.meta)
table(expr.meta$GENDER)
summary(expr.meta$pkyrs)
qqplot(expr.meta$pkyrs)
qqplot(expr.meta$pkyrs, distribution="norm")
qqplot(x=expr.meta$pkyrs, distribution="norm")
qqPlot(x=expr.meta$pkyrs, distribution="norm")
qqnorm(expr.meta$pkyrs, pch=1, frame=FALSE)
qqline(expr.meta$pkyrs, col = "steelblue", lwd = 2)
boxplot(pkyrs~gender, data=expr.meta)
library(gwascat)
data(ebicat_2020_04_30)
ebicat_2020_04_30
sort(table(ebicat_2020_04_30$CHR_ID), decreasing=TRUE)
library(gwascat)
data(ebicat_2020_04_30)
ebicat_2020_04_30
sort(table(ebicat_2020_04_30$CHR_ID), decreasing=TRUE)
data(si.hs.37)
head(si.hs.37)
BiocManager::install("gwascat", version = "1.2")
BiocManager::install("gwascat", version = "3.9")
source("~/Downloads/gwascat_1.12.0.tgz")
source("~/Downloads/gwascat_1.12.0.tgz")
source("~/Downloads/gwascat_1.12.0.tar.gz")
install.packages(~/Downloads/Gwascat_1.12.0.tar.gz, repos=NULL, type="source")
install.packages(Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz, repos=NULL, type="source")
install.packages(/Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz, repos=NULL, type="source")
install.packages("/Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz", repos=NULL, type="source")
install.packages("/Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz", repos=NULL, type="source")
library(devtools)
install.packages(devtools)
install.packages('devtools')
library(devtools)
install_local("Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz")
install_local("/Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz")
install_local("/Users/Lauren/Downloads/Gwascat_1.12.0.tar.gz")
BiocManager::install("gwascat")
BiocManager::install("gwascat")
library(gwascat)
data("ebicat_2020_04_30")
ebicat_2020_04_30
makeCurrentGwascat(
table.url = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
fixNonASCII = TRUE,
genome = "GRCh37",
withOnt = TRUE
)
objects("package:gwascat")
data("ebicat_2020_04_30")
head(ebicat_2020_04_30)
makeCurrentGwascat(
table.url = "http://www.ebi.ac.uk/gwas/api/search/downloads/alternative",
fixNonASCII = TRUE,
genome = "GRCh37",
withOnt = TRUE
)
BiocManager::install("SNPlocs.Hsapiens.dbSNP142.GRCh37")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
BiocManager::install("BSgenome.Hsapiens.UCSC.hg19")
mcols(ebicat_2020_04_30)[,"DISEASE/TRAIT"]
ncols(ebicat_2020_04_30)[,"DISEASE/TRAIT"]
install.packages("granges")
install.packages("GenomicRanges")
install.packages("GenomicRanges")
install.packages("GenomicRanges")
install.packages("GenomicRanges")
install.packages("GenomicRanges")
BiocManager::install("GRangesList")
BiocManager::install("GenomicRanges")
library(GenomicRanges)
mcols(ebicat_2020_04_30)[,"DISEASE/TRAIT"]
reverse(mcols(ebicat_2020_04_30)[,"DISEASE/TRAIT"])
mcols(ebicat_2020_04_30)[,"DISEASE/TRAIT"]
